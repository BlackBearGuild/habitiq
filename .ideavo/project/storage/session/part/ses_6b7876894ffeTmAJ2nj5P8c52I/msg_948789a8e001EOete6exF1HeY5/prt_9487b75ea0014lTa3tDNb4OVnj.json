{
  "id": "prt_9487b75ea0014lTa3tDNb4OVnj",
  "messageID": "msg_948789a8e001EOete6exF1HeY5",
  "sessionID": "ses_6b7876894ffeTmAJ2nj5P8c52I",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01EVssmjKXKBgT3EypvFvw2u",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/ai-insights.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { TrendingUp, Brain, Target, Calendar, Clock, Award, BarChart3, Lightbulb } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\ninterface Note {\n  id: string;\n  content: string;\n  transcript?: string;\n  timestamp: string;\n  type: 'text' | 'voice';\n  tags?: string[];\n}\n\ninterface AIInsightsProps {\n  notes: Note[];\n}\n\ninterface Pattern {\n  type: string;\n  frequency: number;\n  trend: 'up' | 'down' | 'stable';\n  lastSeen: string;\n  confidence: number;\n}\n\ninterface Suggestion {\n  id: string;\n  type: 'habit' | 'optimization' | 'motivation' | 'reminder';\n  title: string;\n  description: string;\n  confidence: number;\n  basedOn: string[];\n  actionable: boolean;\n}\n\nexport function AIInsights({ notes }: AIInsightsProps) {\n  const [insights, setInsights] = useState<{\n    patterns: Pattern[];\n    suggestions: Suggestion[];\n    habitScore: number;\n    consistency: number;\n    weeklyActivity: number[];\n  }>({\n    patterns: [],\n    suggestions: [],\n    habitScore: 0,\n    consistency: 0,\n    weeklyActivity: [0, 0, 0, 0, 0, 0, 0]\n  });\n\n  const analyzePatterns = useMemo(() => {\n    if (notes.length === 0) return null;\n\n    // Analyze patterns\n    const patterns: Pattern[] = [];\n    const suggestions: Suggestion[] = [];\n    \n    // Time-based analysis\n    const notesByHour = notes.reduce((acc, note) => {\n      const hour = new Date(note.timestamp).getHours();\n      acc[hour] = (acc[hour] || 0) + 1;\n      return acc;\n    }, {} as Record<number, number>);\n\n    const peakHours = Object.entries(notesByHour)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([hour]) => parseInt(hour));\n\n    // Category frequency analysis\n    const categoryFreq = notes.reduce((acc, note) => {\n      note.tags?.forEach(tag => {\n        acc[tag] = (acc[tag] || 0) + 1;\n      });\n      return acc;\n    }, {} as Record<string, number>);\n\n    // Convert to patterns\n    Object.entries(categoryFreq).forEach(([category, count]) => {\n      if (count >= 2) {\n        patterns.push({\n          type: category,\n          frequency: count,\n          trend: 'stable',\n          lastSeen: notes.find(n => n.tags?.includes(category))?.timestamp || '',\n          confidence: Math.min(count / notes.length * 100, 95)\n        });\n      }\n    });\n\n    // Generate suggestions based on patterns\n    if (categoryFreq.fitness >= 2) {\n      suggestions.push({\n        id: 'fitness-consistency',\n        type: 'habit',\n        title: 'Build a consistent fitness routine',\n        description: `You've mentioned fitness ${categoryFreq.fitness} times. Consider setting a specific time for workouts to build consistency.`,\n        confidence: 85,\n        basedOn: ['fitness pattern detected'],\n        actionable: true\n      });\n    }\n\n    if (categoryFreq.hydration >= 1) {\n      suggestions.push({\n        id: 'hydration-reminder',\n        type: 'reminder',\n        title: 'Stay hydrated throughout the day',\n        description: 'Set up regular water breaks every 2 hours to maintain optimal hydration.',\n        confidence: 75,\n        basedOn: ['hydration mentions'],\n        actionable: true\n      });\n    }\n\n    if (peakHours.includes(22) || peakHours.includes(23) || peakHours.includes(0)) {\n      suggestions.push({\n        id: 'evening-routine',\n        type: 'optimization',\n        title: 'Optimize your evening routine',\n        description: 'You seem most active in the evening. Consider winding down earlier for better sleep.',\n        confidence: 70,\n        basedOn: ['late night activity pattern'],\n        actionable: true\n      });\n    }\n\n    if (notes.length >= 5 && categoryFreq.sleep) {\n      suggestions.push({\n        id: 'sleep-tracking',\n        type: 'habit',\n        title: 'Track your sleep patterns',\n        description: 'You\\'re thinking about sleep quality. Consider keeping a sleep journal for better insights.',\n        confidence: 80,\n        basedOn: ['sleep-related notes'],\n        actionable: true\n      });\n    }\n\n    // Motivational suggestions\n    suggestions.push({\n      id: 'progress-celebration',\n      type: 'motivation',\n      title: 'Celebrate your progress!',\n      description: `You've captured ${notes.length} thoughts and habits. You're building great self-awareness!`,\n      confidence: 90,\n      basedOn: ['overall activity'],\n      actionable: false\n    });\n\n    // Calculate habit score (0-100)\n    const habitScore = Math.min(\n      (notes.length * 10) + \n      (Object.keys(categoryFreq).length * 15) + \n      (patterns.length * 20), \n      100\n    );\n\n    // Calculate consistency (based on daily activity)\n    const last7Days = Array.from({length: 7}, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      return date.toDateString();\n    });\n\n    const dailyActivity = last7Days.map(date => \n      notes.filter(note => new Date(note.timestamp).toDateString() === date).length\n    ).reverse();\n\n    const consistency = dailyActivity.filter(day => day > 0).length / 7 * 100;\n\n    return {\n      patterns: patterns.sort((a, b) => b.confidence - a.confidence),\n      suggestions: suggestions.sort((a, b) => b.confidence - a.confidence),\n      habitScore,\n      consistency,\n      weeklyActivity: dailyActivity\n    };\n  }, [notes]);\n\n  useEffect(() => {\n    if (analyzePatterns) {\n      setInsights(analyzePatterns);\n    }\n  }, [analyzePatterns]);\n\n  const getPatternIcon = (type: string) => {\n    switch (type) {\n      case 'fitness': return '💪';\n      case 'hydration': return '💧';\n      case 'sleep': return '😴';\n      case 'mindfulness': return '🧘';\n      case 'learning': return '📚';\n      case 'work': return '💼';\n      case 'nutrition': return '🍎';\n      default: return '📝';\n    }\n  };\n\n  const getSuggestionIcon = (type: string) => {\n    switch (type) {\n      case 'habit': return <Target className=\"w-4 h-4\" />;\n      case 'optimization': return <TrendingUp className=\"w-4 h-4\" />;\n      case 'motivation': return <Award className=\"w-4 h-4\" />;\n      case 'reminder': return <Clock className=\"w-4 h-4\" />;\n      default: return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getSuggestionColor = (type: string) => {\n    switch (type) {\n      case 'habit': return 'bg-blue-50 border-blue-200 text-blue-800';\n      case 'optimization': return 'bg-green-50 border-green-200 text-green-800';\n      case 'motivation': return 'bg-purple-50 border-purple-200 text-purple-800';\n      case 'reminder': return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      default: return 'bg-gray-50 border-gray-200 text-gray-800';\n    }\n  };\n\n  if (notes.length === 0) {\n    return (\n      <Card className=\"text-center py-12 bg-white/80 backdrop-blur border-0 shadow-lg\">\n        <CardContent>\n          <Brain className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n          <p className=\"text-lg font-medium text-gray-600 mb-2\">No insights yet</p>\n          <p className=\"text-gray-500\">\n            Add some notes and I'll start analyzing your patterns to provide personalized insights!\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <Brain className=\"w-6 h-6 text-purple-600\" />\n        <h2 className=\"text-xl font-semibold\">AI Insights & Analysis</h2>\n        <Badge variant=\"outline\" className=\"text-xs\">\n          Based on {notes.length} notes\n        </Badge>\n      </div>\n\n      {/* Score Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-0 shadow-lg\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <Target className=\"w-4 h-4\" />\n              Habit Score\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-blue-700\">\n                {insights.habitScore}/100\n              </div>\n              <Progress value={insights.habitScore} className=\"h-2\" />\n              <p className=\"text-xs text-blue-600\">\n                {insights.habitScore >= 80 ? 'Excellent!' : \n                 insights.habitScore >= 60 ? 'Good progress' : 'Building momentum'}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-0 shadow-lg\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              Consistency\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-green-700\">\n                {Math.round(insights.consistency)}%\n              </div>\n              <Progress value={insights.consistency} className=\"h-2\" />\n              <p className=\"text-xs text-green-600\">\n                Last 7 days activity\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-0 shadow-lg\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Weekly Trend\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-end gap-1 h-8\">\n                {insights.weeklyActivity.map((activity, i) => (\n                  <div\n                    key={i}\n                    className=\"bg-purple-400 rounded-sm flex-1\"\n                    style={{ height: `${Math.max(activity * 10, 4)}px` }}\n                    title={`Day ${i + 1}: ${activity} notes`}\n                  />\n                ))}\n              </div>\n              <p className=\"text-xs text-purple-600\">\n                {insights.weeklyActivity.reduce((a, b) => a + b, 0)} notes this week\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"patterns\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2 bg-white/80 backdrop-blur\">\n          <TabsTrigger value=\"patterns\">Detected Patterns</TabsTrigger>\n          <TabsTrigger value=\"suggestions\">AI Suggestions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"patterns\" className=\"space-y-4\">\n          {insights.patterns.length === 0 ? (\n            <Card className=\"text-center py-8 bg-white/80 backdrop-blur border-0 shadow-lg\">\n              <CardContent>\n                <TrendingUp className=\"w-8 h-8 mx-auto text-gray-400 mb-3\" />\n                <p className=\"text-gray-600\">No patterns detected yet</p>\n                <p className=\"text-sm text-gray-500\">Add more notes to see patterns emerge</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-3\">\n              {insights.patterns.map((pattern, index) => (\n                <Card key={index} className=\"bg-white/80 backdrop-blur border-0 shadow-lg\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-xl\">{getPatternIcon(pattern.type)}</span>\n                        <div>\n                          <p className=\"font-medium capitalize\">{pattern.type} Pattern</p>\n                          <p className=\"text-sm text-gray-600\">\n                            Mentioned {pattern.frequency} times\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {Math.round(pattern.confidence)}% confidence\n                        </Badge>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {pattern.trend === 'up' ? '📈' : pattern.trend === 'down' ? '📉' : '📊'} {pattern.trend}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"suggestions\" className=\"space-y-4\">\n          {insights.suggestions.length === 0 ? (\n            <Card className=\"text-center py-8 bg-white/80 backdrop-blur border-0 shadow-lg\">\n              <CardContent>\n                <Lightbulb className=\"w-8 h-8 mx-auto text-gray-400 mb-3\" />\n                <p className=\"text-gray-600\">No suggestions available yet</p>\n                <p className=\"text-sm text-gray-500\">Keep adding notes to get personalized suggestions</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-3\">\n              {insights.suggestions.map((suggestion) => (\n                <Card \n                  key={suggestion.id} \n                  className={`border-2 ${getSuggestionColor(suggestion.type)} shadow-lg`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"mt-1\">\n                        {getSuggestionIcon(suggestion.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h3 className=\"font-medium\">{suggestion.title}</h3>\n                          <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                            {suggestion.type}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-700 mb-2\">\n                          {suggestion.description}\n                        </p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>Based on: {suggestion.basedOn.join(', ')}</span>\n                          <span>{suggestion.confidence}% confidence</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/ai-insights.tsx",
      "exists": false
    },
    "title": "components/ai-insights.tsx",
    "time": {
      "start": 1757857724748,
      "end": 1757857724761
    }
  }
}