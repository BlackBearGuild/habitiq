{
  "id": "prt_94879f9e2001M1ChFpeOhJrWnX",
  "messageID": "msg_948789a8e001EOete6exF1HeY5",
  "sessionID": "ses_6b7876894ffeTmAJ2nj5P8c52I",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_016Txxw2nwa1uXbFzNsGfjJn",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/notes-manager.tsx",
      "content": "\"use client\";\n\nimport { useState } from 'react';\nimport { Search, Filter, Trash2, Edit3, Calendar, Mic, Type, Tag } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\n\ninterface Note {\n  id: string;\n  content: string;\n  transcript?: string;\n  timestamp: string;\n  type: 'text' | 'voice';\n  tags?: string[];\n}\n\ninterface NotesManagerProps {\n  notes: Note[];\n  onUpdateNotes: (notes: Note[]) => void;\n}\n\nexport function NotesManager({ notes, onUpdateNotes }: NotesManagerProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<'all' | 'text' | 'voice'>('all');\n  const [editingNote, setEditingNote] = useState<Note | null>(null);\n  const [editContent, setEditContent] = useState('');\n\n  const filteredNotes = notes.filter(note => {\n    const matchesSearch = (\n      note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      note.transcript?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    const matchesType = filterType === 'all' || note.type === filterType;\n    return matchesSearch && matchesType;\n  });\n\n  const deleteNote = (noteId: string) => {\n    const updatedNotes = notes.filter(note => note.id !== noteId);\n    onUpdateNotes(updatedNotes);\n  };\n\n  const startEditing = (note: Note) => {\n    setEditingNote(note);\n    setEditContent(note.transcript || note.content);\n  };\n\n  const saveEdit = () => {\n    if (!editingNote) return;\n    \n    const updatedNotes = notes.map(note => \n      note.id === editingNote.id \n        ? { \n            ...note, \n            content: editingNote.type === 'text' ? editContent : note.content,\n            transcript: editingNote.type === 'voice' ? editContent : note.transcript\n          }\n        : note\n    );\n    \n    onUpdateNotes(updatedNotes);\n    setEditingNote(null);\n    setEditContent('');\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const renderMarkdown = (text: string) => {\n    return text\n      .replace(/\\*\\*\\*(.*?)\\*\\*\\*/g, '<em><strong>$1</strong></em>')\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      .replace(/^## (.*$)/gm, '<h2 class=\"text-lg font-semibold mt-4 mb-2\">$1</h2>')\n      .replace(/^- (.*$)/gm, '<li class=\"ml-4\">$1</li>')\n      .replace(/\\n/g, '<br>');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Filter */}\n      <div className=\"flex gap-4 flex-col sm:flex-row\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Search notes and transcripts...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Select value={filterType} onValueChange={(value: any) => setFilterType(value)}>\n          <SelectTrigger className=\"w-full sm:w-48\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Notes</SelectItem>\n            <SelectItem value=\"text\">Text Only</SelectItem>\n            <SelectItem value=\"voice\">Voice Only</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Notes Grid */}\n      {filteredNotes.length === 0 ? (\n        <Card className=\"text-center py-12 bg-white/80 backdrop-blur border-0 shadow-lg\">\n          <CardContent>\n            <div className=\"text-gray-400 mb-4\">\n              {searchTerm ? (\n                <Search className=\"w-12 h-12 mx-auto\" />\n              ) : (\n                <Mic className=\"w-12 h-12 mx-auto\" />\n              )}\n            </div>\n            <p className=\"text-lg font-medium text-gray-600 mb-2\">\n              {searchTerm ? 'No matching notes found' : 'No notes yet'}\n            </p>\n            <p className=\"text-gray-500\">\n              {searchTerm \n                ? 'Try adjusting your search terms or filters' \n                : 'Start by adding your first note or voice recording above'\n              }\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredNotes.map((note) => (\n            <Card key={note.id} className=\"bg-white/80 backdrop-blur border-0 shadow-lg hover:shadow-xl transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    {note.type === 'voice' ? (\n                      <Mic className=\"w-4 h-4 text-blue-500\" />\n                    ) : (\n                      <Type className=\"w-4 h-4 text-green-500\" />\n                    )}\n                    <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                      <Calendar className=\"w-3 h-3\" />\n                      {formatTimestamp(note.timestamp)}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => startEditing(note)}>\n                          <Edit3 className=\"w-3 h-3\" />\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Edit Note</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <Textarea\n                            value={editContent}\n                            onChange={(e) => setEditContent(e.target.value)}\n                            className=\"min-h-[200px]\"\n                            placeholder=\"Edit your note...\"\n                          />\n                          <div className=\"flex justify-end gap-2\">\n                            <Button variant=\"outline\" onClick={() => setEditingNote(null)}>\n                              Cancel\n                            </Button>\n                            <Button onClick={saveEdit}>\n                              Save Changes\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      onClick={() => deleteNote(note.id)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {note.transcript ? (\n                    <div \n                      className=\"prose prose-sm max-w-none text-gray-700 leading-relaxed\"\n                      dangerouslySetInnerHTML={{ \n                        __html: renderMarkdown(note.transcript) \n                      }}\n                    />\n                  ) : (\n                    <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                      {note.content}\n                    </p>\n                  )}\n                  \n                  {note.tags && note.tags.length > 0 && (\n                    <div className=\"flex items-center gap-1 flex-wrap\">\n                      <Tag className=\"w-3 h-3 text-gray-400\" />\n                      {note.tags.map(tag => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Stats */}\n      <div className=\"text-center text-sm text-gray-500\">\n        Showing {filteredNotes.length} of {notes.length} notes\n        {searchTerm && ` matching \"${searchTerm}\"`}\n      </div>\n    </div>\n  );\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/notes-manager.tsx",
      "exists": false
    },
    "title": "components/notes-manager.tsx",
    "time": {
      "start": 1757857602933,
      "end": 1757857602941
    }
  }
}